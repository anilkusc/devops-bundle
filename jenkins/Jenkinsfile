pipeline {
triggers { pollSCM('* * * * *') } // This cron is indicates checking commit update interval(gitteki commitleri algılama taraması sıklığı)
environment {
registry = "192.168.1.50:30014/operator"//image_name/container_name
registryCredential = 'testuser' // if registry does not need password we should set this value.(Şifresiz registrilerde de bu değeri girmeliyiz zaten şifre sormuyor.)(Bu id ye sahip kullanıcı adı ve şifre jenkins credentials'da oluşturulmalıdır)
dockerImage = ''
yaml_file_address = 'http://gitea.default.svc.cluster.local:3000/root/yaml.git'//indicate yaml file for kubernetes buildings 
yaml_file = 'operator.yaml'
}
agent any
stages {
stage('Cloning our Git') {
steps {
git 'http://gitea.default.svc.cluster.local:3000/root/operator.git'
}
}
stage('Building our image') {
steps{
script {
dockerImage = docker.build registry + ":latest-$BUILD_NUMBER"
}
}
}
stage('Deploy our image') {
steps{
script {
docker.withRegistry( 'http://192.168.1.50:30014', registryCredential ) { //docker.withRegistry( 'http://192.168.1.50:30014', registryCredential ) şeklinde local registry'i girebiliriz.
dockerImage.push()
}
}
}
}
stage('Cleaning up') {
steps{
sh "docker rmi $registry:latest-$BUILD_NUMBER"
}
}

stage('Deploy to Dev Environment') {
steps{
git "$yaml_file_address"
sh '''
      sed -i "s|image: .*$|image: ${registry}:latest-${BUILD_NUMBER}|" $yaml_file
      kubectl apply -f $yaml_file
   '''
}
}

stage('Start Test Job') {
steps{
git "http://gitea.default.svc.cluster.local:3000/root/test.git"
sh '''
      sed -i "s|  name: test|  name: test-${BUILD_NUMBER}|" test.yaml
      kubectl apply -f test.yaml
      while true; do [ "$(kubectl get po | grep test | awk '{print $3}')" = "Completed" ] && break; done
      kubectl logs $(kubectl get po | grep test | awk '{print $1}')
      kubectl delete job $(kubectl get job -o=jsonpath='{.items[?(@.status.succeeded==1)].metadata.name}')
   '''
}
}

stage('Approval') {
agent none
options {
timeout(time: 2, unit: "MINUTES")
}      
steps {
script {
env.DEPLOY = input message: 'Click Yes if You Want to Contunie Deployment',
parameters: [choice(name: 'Do you want to deploy it to test ?', choices: 'no\nyes', description: 'Choose "yes" if you want to deploy this build')]
}
}
}

stage('Deploy to test') {
agent any
when {
environment name: 'DEPLOY', value: 'yes'
}
steps {
sh "echo 'deployed'"
}
}
}
       
}
